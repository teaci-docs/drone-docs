<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Drone</title>
    <link>http://docs.tea-ci.org/tags/docker/</link>
    <description>Recent content in Docker on Drone</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Feb 2016 08:37:26 +0000</lastBuildDate>
    <atom:link href="http://docs.tea-ci.org/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ECR</title>
      <link>http://docs.tea-ci.org/plugins/ecr/</link>
      <pubDate>Sun, 21 Feb 2016 08:37:26 +0000</pubDate>
      
      <guid>http://docs.tea-ci.org/plugins/ecr/</guid>
      <description>

&lt;p&gt;Use the Docker plugin to build and push Docker images to an AWS Elastic Container Registry.
The following parameters are used to configure this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;access_key&lt;/code&gt; - authenticates with this username&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_key&lt;/code&gt; - authenticates with this password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;region&lt;/code&gt; - authenticates with this email&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt; - repository name for the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; - repository tag for the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;force_tag&lt;/code&gt; - replace existing matched image tags&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_repository&lt;/code&gt; - automatically create repository in ECR&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mirror&lt;/code&gt; - use a mirror registry instead of pulling images directly from the central Hub&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bip&lt;/code&gt; - use for pass bridge ip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage_driver&lt;/code&gt; - use &lt;code&gt;aufs&lt;/code&gt;, &lt;code&gt;devicemapper&lt;/code&gt;, &lt;code&gt;btrfs&lt;/code&gt; or &lt;code&gt;overlay&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt; - save image layers to the specified tar file (see &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/save/&#34;&gt;docker save&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; - absolute / relative destination path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; - cherry-pick tags to save (optional)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt; - restore image layers from the specified tar file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_args&lt;/code&gt; - &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables-build-arg&#34;&gt;build arguments&lt;/a&gt; to pass to &lt;code&gt;docker build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a sample Docker configuration in your .drone.yml file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  ecr:
    access_key: MyAWSAccessKey
    secret_key: MyAWSSecretKey
    region: us-east-1
    repo: foo/bar
    tag: latest
    file: Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may want to dynamically tag your image. Use the &lt;code&gt;$$BRANCH&lt;/code&gt;, &lt;code&gt;$$COMMIT&lt;/code&gt; and &lt;code&gt;$$BUILD_NUMBER&lt;/code&gt; variables to tag your image with the branch, commit sha or build number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  ecr:
    access_key: MyAWSAccessKey
    secret_key: MyAWSSecretKey
    region: us-east-1
    repo: foo/bar
    tag: $$BRANCH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you may prefer to build an image with multiple tags:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  ecr:
    access_key: MyAWSAccessKey
    secret_key: MyAWSSecretKey
    region: us-east-1
    repo: foo/bar
    tag:
      - latest
      - &amp;quot;1.0.1&amp;quot;
      - &amp;quot;1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in the above example we quote the version numbers. If the yaml parser interprets the value as a number it will cause a parsing error.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also possible to pass build arguments to docker:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  ecr:
    access_key: MyAWSAccessKey
    secret_key: MyAWSSecretKey
    region: us-east-1
    repo: foo/bar
    build_args:
      - HTTP_PROXY=http://yourproxy.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;layer-caching:0c23c8ffedfa36132711a1d77a3f0542&#34;&gt;Layer Caching&lt;/h2&gt;

&lt;p&gt;The Drone build environment is, by default, ephemeral meaning that you layers are not saved between builds. The below example combines Drone&amp;rsquo;s caching feature and Docker&amp;rsquo;s &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; capabilities to cache and restore image layers between builds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  erc:
    access_key: MyAWSAccessKey
    secret_key: MyAWSSecretKey
    region: us-east-1
    repo: foo/bar
    tag:
      - latest
      - &amp;quot;1.0.1&amp;quot;
    load: docker/image.tar
    save:
      destination: docker/image.tar
      tag: latest

cache:
  mount:
    - docker/image.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might also want to create a &lt;code&gt;.dockerignore&lt;/code&gt; file in your repo to exclude &lt;code&gt;image.tar&lt;/code&gt; from Docker build context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases caching will greatly improve build performance, however, the tradeoff is that caching Docker image layers may consume very large amounts of disk space.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting:0c23c8ffedfa36132711a1d77a3f0542&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;For detailed output you can set the &lt;code&gt;DOCKER_LAUNCH_DEBUG&lt;/code&gt; environment variable in your plugin configuration. This starts Docker with verbose logging enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    environment:
      - DOCKER_LAUNCH_DEBUG=true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;known-issues:0c23c8ffedfa36132711a1d77a3f0542&#34;&gt;Known Issues&lt;/h2&gt;

&lt;p&gt;There are known issues when attempting to run this plugin on CentOS, RedHat, and Linux installations that do not have a supported storage driver installed. You can check by running &lt;code&gt;docker info | grep &#39;Storage Driver:&#39;&lt;/code&gt; on your host machine. If the storage driver is not &lt;code&gt;aufs&lt;/code&gt; or &lt;code&gt;overlay&lt;/code&gt; you will need to re-configure your host machine.&lt;/p&gt;

&lt;p&gt;This error occurs when trying to use the default &lt;code&gt;aufs&lt;/code&gt; storage Driver but aufs is not installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: driver not supported
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs when trying to use the &lt;code&gt;overlay&lt;/code&gt; storage Driver but overlay is not installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=error msg=&amp;quot;&#39;overlay&#39; not found as a supported filesystem on this host.
Please ensure kernel is new enough and has overlay support loaded.&amp;quot;
level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: driver not supported&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs when using CentOS or RedHat which default to the &lt;code&gt;devicemapper&lt;/code&gt; storage driver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=error msg=&amp;quot;There are no more loopback devices available.&amp;quot;
level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: loopback mounting failed&amp;quot;
Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above issue can be resolved by setting &lt;code&gt;storage_driver: vfs&lt;/code&gt; in the &lt;code&gt;.drone.yml&lt;/code&gt; file. This may work, but will have very poor performance as discussed &lt;a href=&#34;https://github.com/rancher/docker-from-scratch/issues/20&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://docs.tea-ci.org/plugins/docker/</link>
      <pubDate>Sun, 21 Feb 2016 08:34:06 +0000</pubDate>
      
      <guid>http://docs.tea-ci.org/plugins/docker/</guid>
      <description>

&lt;p&gt;Use the Docker plugin to build and push Docker images to a registry.
The following parameters are used to configure this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;registry&lt;/code&gt; - authenticates to this registry&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; - authenticates with this username&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; - authenticates with this password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;email&lt;/code&gt; - authenticates with this email&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt; - repository name for the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; - repository tag for the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; - dockerfile to be used, defaults to Dockerfile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth&lt;/code&gt; - auth token for the registry&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; - the context path to use, defaults to root of the git repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;force_tag&lt;/code&gt; - replace existing matched image tags&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insecure&lt;/code&gt; - enable insecure communication to this registry&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mirror&lt;/code&gt; - use a mirror registry instead of pulling images directly from the central Hub&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bip&lt;/code&gt; - use for pass bridge ip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns&lt;/code&gt; - set custom dns servers for the container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage_driver&lt;/code&gt; - use &lt;code&gt;aufs&lt;/code&gt;, &lt;code&gt;devicemapper&lt;/code&gt;, &lt;code&gt;btrfs&lt;/code&gt; or &lt;code&gt;overlay&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt; - save image layers to the specified tar file (see &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/save/&#34;&gt;docker save&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; - absolute / relative destination path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; - cherry-pick tags to save (optional)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt; - restore image layers from the specified tar file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_args&lt;/code&gt; - &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables-build-arg&#34;&gt;build arguments&lt;/a&gt; to pass to &lt;code&gt;docker build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a sample Docker configuration in your .drone.yml file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    username: kevinbacon
    password: pa55word
    email: kevin.bacon@mail.com
    repo: foo/bar
    tag: latest
    file: Dockerfile
    insecure: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may want to dynamically tag your image. Use the &lt;code&gt;$$BRANCH&lt;/code&gt;, &lt;code&gt;$$COMMIT&lt;/code&gt; and &lt;code&gt;$$BUILD_NUMBER&lt;/code&gt; variables to tag your image with the branch, commit sha or build number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    username: kevinbacon
    password: pa55word
    email: kevin.bacon@mail.com
    repo: foo/bar
    tag: $$BRANCH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you may prefer to build an image with multiple tags:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    username: kevinbacon
    password: pa55word
    email: kevin.bacon@mail.com
    repo: foo/bar
    tag:
      - latest
      - &amp;quot;1.0.1&amp;quot;
      - &amp;quot;1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in the above example we quote the version numbers. If the yaml parser interprets the value as a number it will cause a parsing error.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also possible to pass build arguments to docker:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    username: kevinbacon
    password: pa55word
    email: kevin.bacon@mail.com
    repo: foo/bar
    build_args:
      - HTTP_PROXY=http://yourproxy.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;layer-caching:69e60651f42783a7df723575c4088b5b&#34;&gt;Layer Caching&lt;/h2&gt;

&lt;p&gt;The Drone build environment is, by default, ephemeral meaning that you layers are not saved between builds. The below example combines Drone&amp;rsquo;s caching feature and Docker&amp;rsquo;s &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; capabilities to cache and restore image layers between builds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    username: kevinbacon
    password: pa55word
    email: kevin.bacon@mail.com
    repo: foo/bar
    tag:
      - latest
      - &amp;quot;1.0.1&amp;quot;
    load: docker/image.tar
    save:
      destination: docker/image.tar
      tag: latest

cache:
  mount:
    - docker/image.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might also want to create a &lt;code&gt;.dockerignore&lt;/code&gt; file in your repo to exclude &lt;code&gt;image.tar&lt;/code&gt; from Docker build context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases caching will greatly improve build performance, however, the tradeoff is that caching Docker image layers may consume very large amounts of disk space.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting:69e60651f42783a7df723575c4088b5b&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;For detailed output you can set the &lt;code&gt;DOCKER_LAUNCH_DEBUG&lt;/code&gt; environment variable in your plugin configuration. This starts Docker with verbose logging enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  docker:
    environment:
      - DOCKER_LAUNCH_DEBUG=true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;known-issues:69e60651f42783a7df723575c4088b5b&#34;&gt;Known Issues&lt;/h2&gt;

&lt;p&gt;There are known issues when attempting to run this plugin on CentOS, RedHat, and Linux installations that do not have a supported storage driver installed. You can check by running &lt;code&gt;docker info | grep &#39;Storage Driver:&#39;&lt;/code&gt; on your host machine. If the storage driver is not &lt;code&gt;aufs&lt;/code&gt; or &lt;code&gt;overlay&lt;/code&gt; you will need to re-configure your host machine.&lt;/p&gt;

&lt;p&gt;This error occurs when trying to use the default &lt;code&gt;aufs&lt;/code&gt; storage Driver but aufs is not installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: driver not supported
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs when trying to use the &lt;code&gt;overlay&lt;/code&gt; storage Driver but overlay is not installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=error msg=&amp;quot;&#39;overlay&#39; not found as a supported filesystem on this host.
Please ensure kernel is new enough and has overlay support loaded.&amp;quot;
level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: driver not supported&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs when using CentOS or RedHat which default to the &lt;code&gt;devicemapper&lt;/code&gt; storage driver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=error msg=&amp;quot;There are no more loopback devices available.&amp;quot;
level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: loopback mounting failed&amp;quot;
Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above issue can be resolved by setting &lt;code&gt;storage_driver: vfs&lt;/code&gt; in the &lt;code&gt;.drone.yml&lt;/code&gt; file. This may work, but will have very poor performance as discussed &lt;a href=&#34;https://github.com/rancher/docker-from-scratch/issues/20&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This error occurs when using Debian wheezy or jessie and cgroups memory features are not configured at the kernel level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=debug msg=&amp;quot;Mounting none /sys/fs/cgroup/blkio cgroup blkio&amp;quot;
time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=debug msg=&amp;quot;Mounting none /sys/fs/cgroup/perf_event cgroup perf_event&amp;quot;
time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=debug msg=&amp;quot;Mounting none /sys/fs/cgroup/cpuset cgroup cpuset&amp;quot;
time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=debug msg=&amp;quot;Mounting none /sys/fs/cgroup/cpu,cpuacct cgroup cpu,cpuacct&amp;quot;
time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=debug msg=&amp;quot;Creating /sys/fs/cgroup/memory&amp;quot;
time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=debug msg=&amp;quot;Mounting none /sys/fs/cgroup/memory cgroup memory&amp;quot;
time=&amp;quot;2015-12-17T08:06:57Z&amp;quot; level=fatal msg=&amp;quot;no such file or directory&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above issue can be resolved by editing your &lt;code&gt;grub.cfg&lt;/code&gt; and adding &lt;code&gt;cgroup_enable=memory swapaccount=1&lt;/code&gt; to you kernel image. This change should look like that afterwards:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;menuentry &#39;Debian GNU/Linux, avec Linux 3.16.0-0.bpo.4-amd64&#39; --class debian --class gnu-linux --class gnu --class os {
        load_video
        insmod gzio
        insmod raid
        insmod mdraid09
        insmod part_msdos
        insmod part_msdos
        insmod part_msdos
        insmod ext2
        set root=&#39;(mduuid/dab6cffad124a3d7a4d2adc226fd5302)&#39;
        search --no-floppy --fs-uuid --set=root a4085974-c507-4993-a9ed-bdc17e375cad
        echo    &#39;Chargement de Linux 3.16.0-0.bpo.4-amd64 ...&#39;
        linux   /boot/vmlinuz-3.16.0-0.bpo.4-amd64 root=/dev/md1 ro  cgroup_enable=memory swapaccount=1 quiet
        echo    &#39;Chargement du disque mémoire initial ...&#39;
        initrd  /boot/initrd.img-3.16.0-0.bpo.4-amd64
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>http://docs.tea-ci.org/plugins/rancher/</link>
      <pubDate>Sat, 13 Feb 2016 09:01:32 +0000</pubDate>
      
      <guid>http://docs.tea-ci.org/plugins/rancher/</guid>
      <description>&lt;p&gt;Use the rancher plugin to upgrade a service in &lt;a href=&#34;http://rancher.com&#34;&gt;rancher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following parameters are used to configure this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; - url to your rancher server, including protocol and port&lt;/li&gt;
&lt;li&gt;&lt;code&gt;access_key&lt;/code&gt; - rancher api access key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_key&lt;/code&gt; - rancher api secret key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt; - name of rancher service to act on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker_image&lt;/code&gt; - new image to assign to service, including tag (&lt;code&gt;drone/drone:latest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_first&lt;/code&gt; - start the new container before stopping the old one, defaults to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;confirm&lt;/code&gt; - auto confirm the service upgrade if successful, defaults to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - the maximum wait time in seconds for the service to upgrade, default to &lt;code&gt;30&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a sample Rancher configuration in your &lt;code&gt;.drone.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:
  rancher:
    url: https://example.rancher.com
    access_key: 1234567abcdefg
    secret_key: abcdefg1234567
    service: drone/drone
    docker_image: drone/drone:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if your &lt;code&gt;service&lt;/code&gt; is part of a stack, you should use the notation &lt;code&gt;stackname/servicename&lt;/code&gt; as this will make sure that the found service is part of the correct stack. If no stack is specified, this plugin will update the first service with a matching name which may not be what you want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutum</title>
      <link>http://docs.tea-ci.org/plugins/tutum/</link>
      <pubDate>Sat, 13 Feb 2016 08:59:40 +0000</pubDate>
      
      <guid>http://docs.tea-ci.org/plugins/tutum/</guid>
      <description>&lt;p&gt;Use the tutum plugin to redeploy or update a service in &lt;a href=&#34;https://tutum.co&#34;&gt;tutum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following parameters are used to configure this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; - username&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api_key&lt;/code&gt; - tutum api key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt; - name of tutum service to act on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker_image&lt;/code&gt; - new image to assign to service, including tag (&lt;code&gt;drone/drone:latest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redeploy&lt;/code&gt; - should the service be redeployed after updating&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reuse_volumes&lt;/code&gt; - whether or not to reuse volumes when redeploying (defaults to &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a sample Tutum configuration in your &lt;code&gt;.drone.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:
  tutum:
    username: somebody
    api_key: abcdefg1234567
    service: drone
    image: drone/drone:latest
    redeploy: true
    reuse_volumes: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if your &lt;code&gt;service&lt;/code&gt; is part of a stack, you should use the notation &lt;code&gt;servicename.stackname&lt;/code&gt; as this will make sure that the found service is part of the correct stack.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Container Registry</title>
      <link>http://docs.tea-ci.org/plugins/gcr/</link>
      <pubDate>Sat, 13 Feb 2016 08:59:33 +0000</pubDate>
      
      <guid>http://docs.tea-ci.org/plugins/gcr/</guid>
      <description>

&lt;p&gt;Use this plugin to build and push Docker images to the Google Container Registry (GCR). Please read the GCR &lt;a href=&#34;https://cloud.google.com/container-registry/&#34;&gt;documentation&lt;/a&gt; before you begin. You will need to generate a &lt;a href=&#34;https://developers.google.com/console/help/new/#serviceaccounts&#34;&gt;JSON token&lt;/a&gt; to authenticate to the registry and push images.&lt;/p&gt;

&lt;p&gt;The following parameters are used to configure this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;registry&lt;/code&gt; - authenticates to this registry (defaults to &lt;code&gt;gcr.io&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt; - json token&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt; - repository name for the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; - repository tag for the image (defaults to &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage_driver&lt;/code&gt; - use &lt;code&gt;aufs&lt;/code&gt;, &lt;code&gt;devicemapper&lt;/code&gt;, &lt;code&gt;btrfs&lt;/code&gt; or &lt;code&gt;overlay&lt;/code&gt; driver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  gcr:
    repo: foo/bar
    token: &amp;gt;
      {
        &amp;quot;private_key_id&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;private_key&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;client_email&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;client_id&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;...&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sample configuration using multiple tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;publish:
  gcr:
    repo: foo/bar
    tag:
      - latest
      - &amp;quot;1.0.1&amp;quot;
      - &amp;quot;1.0&amp;quot;
    token: &amp;gt;
      {
        &amp;quot;private_key_id&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;private_key&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;client_email&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;client_id&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;...&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;json-token:e36943907c8530760d5268ab204f3440&#34;&gt;JSON Token&lt;/h2&gt;

&lt;p&gt;When setting your token in the &lt;code&gt;.drone.yml&lt;/code&gt; file you must use &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#id2796251&#34;&gt;folded block scalars&lt;/a&gt; to avoid parsing errors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;publish:
  gcr:
    token: &amp;gt;
      {
        &amp;quot;private_key_id&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;private_key&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;client_email&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;client_id&amp;quot;: &amp;quot;...&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;...&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When injecting secrets you must also use a folded block scalar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;publish:
  gcr:
    token: &amp;gt;
      $$GOOGLE_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When defining secrets in a &lt;code&gt;.drone.sec&lt;/code&gt; file you must also use folded block scalars. Please note that you should either place your JSON string on a single line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;environment:
  GOOGLE_KEY: &amp;gt;
    { &amp;quot;private_key_id&amp;quot;: &amp;quot;...&amp;quot;, &amp;quot;private_key&amp;quot;: &amp;quot;...&amp;quot; ... }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you must ensure all lines have the exact same indentation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;environment:
  GOOGLE_KEY: &amp;gt;
    {
    &amp;quot;private_key_id&amp;quot;: &amp;quot;...&amp;quot;,
    &amp;quot;private_key&amp;quot;: &amp;quot;...&amp;quot;,
    &amp;quot;client_email&amp;quot;: &amp;quot;...&amp;quot;,
    &amp;quot;client_id&amp;quot;: &amp;quot;...&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;...&amp;quot;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;troubleshooting:e36943907c8530760d5268ab204f3440&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;For detailed output you can set the &lt;code&gt;DOCKER_LAUNCH_DEBUG&lt;/code&gt; environment variable in your plugin configuration. This starts Docker with verbose logging enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;publish:
  gcr:
    environment:
      - DOCKER_LAUNCH_DEBUG=true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;known-issues:e36943907c8530760d5268ab204f3440&#34;&gt;Known Issues&lt;/h2&gt;

&lt;p&gt;There are known issues when attempting to run this plugin on CentOS, RedHat, and Linux installations that do not have a supported storage driver installed. You can check by running &lt;code&gt;docker info | grep &#39;Storage Driver:&#39;&lt;/code&gt; on your host machine. If the storage driver is not &lt;code&gt;aufs&lt;/code&gt; or &lt;code&gt;overlay&lt;/code&gt; you will need to re-configure your host machine.&lt;/p&gt;

&lt;p&gt;This error occurs when trying to use the default &lt;code&gt;aufs&lt;/code&gt; storage Driver but aufs is not installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: driver not supported
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs when trying to use the &lt;code&gt;overlay&lt;/code&gt; storage Driver but overlay is not installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=error msg=&amp;quot;&#39;overlay&#39; not found as a supported filesystem on this host.
Please ensure kernel is new enough and has overlay support loaded.&amp;quot; 
level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: driver not supported&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error occurs when using CentOS or RedHat which default to the &lt;code&gt;devicemapper&lt;/code&gt; storage driver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level=error msg=&amp;quot;There are no more loopback devices available.&amp;quot; 
level=fatal msg=&amp;quot;Error starting daemon: error initializing graphdriver: loopback mounting failed&amp;quot; 
Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above issue can be resolved by setting &lt;code&gt;storage_driver: vfs&lt;/code&gt; in the &lt;code&gt;.drone.yml&lt;/code&gt; file. This may work, but will have very poor performance as discussed &lt;a href=&#34;https://github.com/rancher/docker-from-scratch/issues/20&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DockerHub</title>
      <link>http://docs.tea-ci.org/plugins/dockerhub/</link>
      <pubDate>Sat, 13 Feb 2016 08:59:01 +0000</pubDate>
      
      <guid>http://docs.tea-ci.org/plugins/dockerhub/</guid>
      <description>&lt;p&gt;Use the DockerHub plugin to trigger a remote build after your build successfully completes.
The following parameters are used to configuration this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt; - json payloads are sent here&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repo&lt;/strong&gt; - messages sent to the above webhook are posted here&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a sample DockerHub configuration in your .drone.yml file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:
  dockerhub:
    token: be579c82-7c0e-11e4-81c4-0242ac110020
    repo: foo/bar
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>